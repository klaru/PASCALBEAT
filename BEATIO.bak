{$N+ }
unit beatio;

interface
 uses beatinc;

procedure menu(NumOpt : integer; Header : str; OptArray : strgarray; var SelOpt : opt);
procedure GetParam (question : str; UnitSel : integer; var number : extended);
procedure GetIParam (question : str; var number : integer);
procedure GetResponse (question : str; var response : boolean);

implementation
  uses crt;
(****************************************************************************)
procedure menu;
(****************************************************************************)

(* This procedure provides the ability to generate a menu driven program *)
(* Options are limited to ten selections.  The Option number selected is *)
(* returned to the main program.                                         *)

var
   Temp,
   DepthMargin,
   WidthMargin : integer;
   Option : opt;

begin

   Temp := 0;
   (*ClrScr;  Clear Screen *)
   for Temp:= 1 to ((ScreenWidth - 48) div 2) do
   write (' ');
   writeln ('Board Electrical Analysis Tool - BEAT (Rev 3.11)');
(* DepthMargin := (ScreenDepth - NumOpt - 5) div 2; *)
   DepthMargin := (ScreenDepth - 5) div 2;
   WidthMargin := (ScreenWidth - 40) div 2;
   for Temp:= 1 to DepthMargin do
      writeln;
   for Temp := 1 to WidthMargin do
      write(' ');
   writeln(Header);
   for Temp := 1 to WidthMargin do
      write(' ');
   writeln('---------------------------------------');
   writeln;
   for Option := 1 to NumOpt do
   begin
      for Temp := 1 to (WidthMargin - 3) do
         write(' ');
      write(Option,') ');
      writeln(OptArray[Option]);
   end;
   writeln;
   for Temp := 1 to WidthMargin do
      write(' ');
   write ('Select Option number: ');
   readln (SelOpt);
(*   ClrScr; *)
end (* menu *);


(****************************************************************************)
procedure GetParam;
(****************************************************************************)

var
   temp : str;
   error : integer;

begin
   write(question,'[', number:3:4,'] ');
   readln(temp);
   if temp <> '' then
      Val(temp, number, error);
end (* GetParam *);





(****************************************************************************)
procedure GetIParam;
(****************************************************************************)

var
   temp : str;
   error : integer;

begin
   write(question,'[', number:6,'] ');
   readln(temp);
   if temp <> '' then
     Val(temp,number,error);
end (* GetIParam *);

(****************************************************************************)
procedure GetResponse;
(****************************************************************************)

var
   temp,Query : char;

begin
    writeln (question, '[n] ');
    repeat
     temp := Readkey;
    until (temp = 'y') OR (temp = 'Y') OR (temp = 'n') OR (temp = 'N') OR (temp = ^M);
    if temp <> ^M then Query := temp;
    if (Query = 'y') OR (Query = 'Y') then
        Response := true
    else
        Response := false;
end; (* GetResponse *)
end.
